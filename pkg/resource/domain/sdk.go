// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package domain

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/opensearchservice"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/opensearchservice-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.OpenSearchService{}
	_ = &svcapitypes.Domain{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeDomainOutput
	resp, err = rm.sdkapi.DescribeDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeDomain", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.DomainStatus.AIMLOptions != nil {
		f0 := &svcapitypes.AIMLOptionsInput{}
		if resp.DomainStatus.AIMLOptions.NaturalLanguageQueryGenerationOptions != nil {
			f0f0 := &svcapitypes.NATuralLanguageQueryGenerationOptionsInput{}
			if resp.DomainStatus.AIMLOptions.NaturalLanguageQueryGenerationOptions.DesiredState != nil {
				f0f0.DesiredState = resp.DomainStatus.AIMLOptions.NaturalLanguageQueryGenerationOptions.DesiredState
			}
			f0.NATuralLanguageQueryGenerationOptions = f0f0
		}
		ko.Spec.AIMLOptions = f0
	} else {
		ko.Spec.AIMLOptions = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainStatus.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainStatus.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainStatus.AccessPolicies != nil {
		ko.Spec.AccessPolicies = resp.DomainStatus.AccessPolicies
	} else {
		ko.Spec.AccessPolicies = nil
	}
	if resp.DomainStatus.AdvancedOptions != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range resp.DomainStatus.AdvancedOptions {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		ko.Spec.AdvancedOptions = f3
	} else {
		ko.Spec.AdvancedOptions = nil
	}
	if resp.DomainStatus.AdvancedSecurityOptions != nil {
		f4 := &svcapitypes.AdvancedSecurityOptionsInput{}
		if resp.DomainStatus.AdvancedSecurityOptions.AnonymousAuthEnabled != nil {
			f4.AnonymousAuthEnabled = resp.DomainStatus.AdvancedSecurityOptions.AnonymousAuthEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.Enabled != nil {
			f4.Enabled = resp.DomainStatus.AdvancedSecurityOptions.Enabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f4.InternalUserDatabaseEnabled = resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions != nil {
			f4f4 := &svcapitypes.JWTOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.Enabled != nil {
				f4f4.Enabled = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.PublicKey != nil {
				f4f4.PublicKey = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.PublicKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.RolesKey != nil {
				f4f4.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.SubjectKey != nil {
				f4f4.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.SubjectKey
			}
			f4.JWTOptions = f4f4
		}
		if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions != nil {
			f4f5 := &svcapitypes.SAMLOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f4f5.Enabled = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp != nil {
				f4f5f1 := &svcapitypes.SAMLIDp{}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId != nil {
					f4f5f1.EntityID = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId
				}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent != nil {
					f4f5f1.MetadataContent = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent
				}
				f4f5.IDp = f4f5f1
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f4f5.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f4f5.SessionTimeoutMinutes = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f4f5.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey
			}
			f4.SAMLOptions = f4f5
		}
		ko.Spec.AdvancedSecurityOptions = f4
	} else {
		ko.Spec.AdvancedSecurityOptions = nil
	}
	if resp.DomainStatus.AutoTuneOptions != nil {
		f5 := &svcapitypes.AutoTuneOptionsInput{}
		if resp.DomainStatus.AutoTuneOptions.UseOffPeakWindow != nil {
			f5.UseOffPeakWindow = resp.DomainStatus.AutoTuneOptions.UseOffPeakWindow
		}
		ko.Spec.AutoTuneOptions = f5
	} else {
		ko.Spec.AutoTuneOptions = nil
	}
	if resp.DomainStatus.ChangeProgressDetails != nil {
		f6 := &svcapitypes.ChangeProgressDetails{}
		if resp.DomainStatus.ChangeProgressDetails.ChangeId != nil {
			f6.ChangeID = resp.DomainStatus.ChangeProgressDetails.ChangeId
		}
		if resp.DomainStatus.ChangeProgressDetails.ConfigChangeStatus != nil {
			f6.ConfigChangeStatus = resp.DomainStatus.ChangeProgressDetails.ConfigChangeStatus
		}
		if resp.DomainStatus.ChangeProgressDetails.InitiatedBy != nil {
			f6.InitiatedBy = resp.DomainStatus.ChangeProgressDetails.InitiatedBy
		}
		if resp.DomainStatus.ChangeProgressDetails.LastUpdatedTime != nil {
			f6.LastUpdatedTime = &metav1.Time{*resp.DomainStatus.ChangeProgressDetails.LastUpdatedTime}
		}
		if resp.DomainStatus.ChangeProgressDetails.Message != nil {
			f6.Message = resp.DomainStatus.ChangeProgressDetails.Message
		}
		if resp.DomainStatus.ChangeProgressDetails.StartTime != nil {
			f6.StartTime = &metav1.Time{*resp.DomainStatus.ChangeProgressDetails.StartTime}
		}
		ko.Status.ChangeProgressDetails = f6
	} else {
		ko.Status.ChangeProgressDetails = nil
	}
	if resp.DomainStatus.ClusterConfig != nil {
		f7 := &svcapitypes.ClusterConfig{}
		if resp.DomainStatus.ClusterConfig.ColdStorageOptions != nil {
			f7f0 := &svcapitypes.ColdStorageOptions{}
			if resp.DomainStatus.ClusterConfig.ColdStorageOptions.Enabled != nil {
				f7f0.Enabled = resp.DomainStatus.ClusterConfig.ColdStorageOptions.Enabled
			}
			f7.ColdStorageOptions = f7f0
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterCount != nil {
			f7.DedicatedMasterCount = resp.DomainStatus.ClusterConfig.DedicatedMasterCount
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterEnabled != nil {
			f7.DedicatedMasterEnabled = resp.DomainStatus.ClusterConfig.DedicatedMasterEnabled
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterType != nil {
			f7.DedicatedMasterType = resp.DomainStatus.ClusterConfig.DedicatedMasterType
		}
		if resp.DomainStatus.ClusterConfig.InstanceCount != nil {
			f7.InstanceCount = resp.DomainStatus.ClusterConfig.InstanceCount
		}
		if resp.DomainStatus.ClusterConfig.InstanceType != nil {
			f7.InstanceType = resp.DomainStatus.ClusterConfig.InstanceType
		}
		if resp.DomainStatus.ClusterConfig.MultiAZWithStandbyEnabled != nil {
			f7.MultiAZWithStandbyEnabled = resp.DomainStatus.ClusterConfig.MultiAZWithStandbyEnabled
		}
		if resp.DomainStatus.ClusterConfig.WarmCount != nil {
			f7.WarmCount = resp.DomainStatus.ClusterConfig.WarmCount
		}
		if resp.DomainStatus.ClusterConfig.WarmEnabled != nil {
			f7.WarmEnabled = resp.DomainStatus.ClusterConfig.WarmEnabled
		}
		if resp.DomainStatus.ClusterConfig.WarmType != nil {
			f7.WarmType = resp.DomainStatus.ClusterConfig.WarmType
		}
		if resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig != nil {
			f7f10 := &svcapitypes.ZoneAwarenessConfig{}
			if resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f7f10.AvailabilityZoneCount = resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount
			}
			f7.ZoneAwarenessConfig = f7f10
		}
		if resp.DomainStatus.ClusterConfig.ZoneAwarenessEnabled != nil {
			f7.ZoneAwarenessEnabled = resp.DomainStatus.ClusterConfig.ZoneAwarenessEnabled
		}
		ko.Spec.ClusterConfig = f7
	} else {
		ko.Spec.ClusterConfig = nil
	}
	if resp.DomainStatus.CognitoOptions != nil {
		f8 := &svcapitypes.CognitoOptions{}
		if resp.DomainStatus.CognitoOptions.Enabled != nil {
			f8.Enabled = resp.DomainStatus.CognitoOptions.Enabled
		}
		if resp.DomainStatus.CognitoOptions.IdentityPoolId != nil {
			f8.IdentityPoolID = resp.DomainStatus.CognitoOptions.IdentityPoolId
		}
		if resp.DomainStatus.CognitoOptions.RoleArn != nil {
			f8.RoleARN = resp.DomainStatus.CognitoOptions.RoleArn
		}
		if resp.DomainStatus.CognitoOptions.UserPoolId != nil {
			f8.UserPoolID = resp.DomainStatus.CognitoOptions.UserPoolId
		}
		ko.Spec.CognitoOptions = f8
	} else {
		ko.Spec.CognitoOptions = nil
	}
	if resp.DomainStatus.Created != nil {
		ko.Status.Created = resp.DomainStatus.Created
	} else {
		ko.Status.Created = nil
	}
	if resp.DomainStatus.Deleted != nil {
		ko.Status.Deleted = resp.DomainStatus.Deleted
	} else {
		ko.Status.Deleted = nil
	}
	if resp.DomainStatus.DomainEndpointOptions != nil {
		f11 := &svcapitypes.DomainEndpointOptions{}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpoint != nil {
			f11.CustomEndpoint = resp.DomainStatus.DomainEndpointOptions.CustomEndpoint
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn != nil {
			f11.CustomEndpointCertificateARN = resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f11.CustomEndpointEnabled = resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled
		}
		if resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS != nil {
			f11.EnforceHTTPS = resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS
		}
		if resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f11.TLSSecurityPolicy = resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy
		}
		ko.Spec.DomainEndpointOptions = f11
	} else {
		ko.Spec.DomainEndpointOptions = nil
	}
	if resp.DomainStatus.DomainEndpointV2HostedZoneId != nil {
		ko.Status.DomainEndpointV2HostedZoneID = resp.DomainStatus.DomainEndpointV2HostedZoneId
	} else {
		ko.Status.DomainEndpointV2HostedZoneID = nil
	}
	if resp.DomainStatus.DomainId != nil {
		ko.Status.DomainID = resp.DomainStatus.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainStatus.DomainName != nil {
		ko.Spec.Name = resp.DomainStatus.DomainName
	} else {
		ko.Spec.Name = nil
	}
	if resp.DomainStatus.DomainProcessingStatus != nil {
		ko.Status.DomainProcessingStatus = resp.DomainStatus.DomainProcessingStatus
	} else {
		ko.Status.DomainProcessingStatus = nil
	}
	if resp.DomainStatus.EBSOptions != nil {
		f16 := &svcapitypes.EBSOptions{}
		if resp.DomainStatus.EBSOptions.EBSEnabled != nil {
			f16.EBSEnabled = resp.DomainStatus.EBSOptions.EBSEnabled
		}
		if resp.DomainStatus.EBSOptions.Iops != nil {
			f16.IOPS = resp.DomainStatus.EBSOptions.Iops
		}
		if resp.DomainStatus.EBSOptions.Throughput != nil {
			f16.Throughput = resp.DomainStatus.EBSOptions.Throughput
		}
		if resp.DomainStatus.EBSOptions.VolumeSize != nil {
			f16.VolumeSize = resp.DomainStatus.EBSOptions.VolumeSize
		}
		if resp.DomainStatus.EBSOptions.VolumeType != nil {
			f16.VolumeType = resp.DomainStatus.EBSOptions.VolumeType
		}
		ko.Spec.EBSOptions = f16
	} else {
		ko.Spec.EBSOptions = nil
	}
	if resp.DomainStatus.EncryptionAtRestOptions != nil {
		f17 := &svcapitypes.EncryptionAtRestOptions{}
		if resp.DomainStatus.EncryptionAtRestOptions.Enabled != nil {
			f17.Enabled = resp.DomainStatus.EncryptionAtRestOptions.Enabled
		}
		if resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId != nil {
			f17.KMSKeyID = resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId
		}
		ko.Spec.EncryptionAtRestOptions = f17
	} else {
		ko.Spec.EncryptionAtRestOptions = nil
	}
	if resp.DomainStatus.Endpoint != nil {
		ko.Status.Endpoint = resp.DomainStatus.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DomainStatus.EndpointV2 != nil {
		ko.Status.EndpointV2 = resp.DomainStatus.EndpointV2
	} else {
		ko.Status.EndpointV2 = nil
	}
	if resp.DomainStatus.Endpoints != nil {
		f20 := map[string]*string{}
		for f20key, f20valiter := range resp.DomainStatus.Endpoints {
			var f20val string
			f20val = *f20valiter
			f20[f20key] = &f20val
		}
		ko.Status.Endpoints = f20
	} else {
		ko.Status.Endpoints = nil
	}
	if resp.DomainStatus.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.DomainStatus.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.DomainStatus.IPAddressType != nil {
		ko.Spec.IPAddressType = resp.DomainStatus.IPAddressType
	} else {
		ko.Spec.IPAddressType = nil
	}
	if resp.DomainStatus.LogPublishingOptions != nil {
		f23 := map[string]*svcapitypes.LogPublishingOption{}
		for f23key, f23valiter := range resp.DomainStatus.LogPublishingOptions {
			f23val := &svcapitypes.LogPublishingOption{}
			if f23valiter.CloudWatchLogsLogGroupArn != nil {
				f23val.CloudWatchLogsLogGroupARN = f23valiter.CloudWatchLogsLogGroupArn
			}
			if f23valiter.Enabled != nil {
				f23val.Enabled = f23valiter.Enabled
			}
			f23[f23key] = f23val
		}
		ko.Spec.LogPublishingOptions = f23
	} else {
		ko.Spec.LogPublishingOptions = nil
	}
	if resp.DomainStatus.ModifyingProperties != nil {
		f24 := []*svcapitypes.ModifyingProperties{}
		for _, f24iter := range resp.DomainStatus.ModifyingProperties {
			f24elem := &svcapitypes.ModifyingProperties{}
			if f24iter.ActiveValue != nil {
				f24elem.ActiveValue = f24iter.ActiveValue
			}
			if f24iter.Name != nil {
				f24elem.Name = f24iter.Name
			}
			if f24iter.PendingValue != nil {
				f24elem.PendingValue = f24iter.PendingValue
			}
			if f24iter.ValueType != nil {
				f24elem.ValueType = f24iter.ValueType
			}
			f24 = append(f24, f24elem)
		}
		ko.Status.ModifyingProperties = f24
	} else {
		ko.Status.ModifyingProperties = nil
	}
	if resp.DomainStatus.NodeToNodeEncryptionOptions != nil {
		f25 := &svcapitypes.NodeToNodeEncryptionOptions{}
		if resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled != nil {
			f25.Enabled = resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled
		}
		ko.Spec.NodeToNodeEncryptionOptions = f25
	} else {
		ko.Spec.NodeToNodeEncryptionOptions = nil
	}
	if resp.DomainStatus.OffPeakWindowOptions != nil {
		f26 := &svcapitypes.OffPeakWindowOptions{}
		if resp.DomainStatus.OffPeakWindowOptions.Enabled != nil {
			f26.Enabled = resp.DomainStatus.OffPeakWindowOptions.Enabled
		}
		if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow != nil {
			f26f1 := &svcapitypes.OffPeakWindow{}
			if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime != nil {
				f26f1f0 := &svcapitypes.WindowStartTime{}
				if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours != nil {
					f26f1f0.Hours = resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours
				}
				if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes != nil {
					f26f1f0.Minutes = resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes
				}
				f26f1.WindowStartTime = f26f1f0
			}
			f26.OffPeakWindow = f26f1
		}
		ko.Spec.OffPeakWindowOptions = f26
	} else {
		ko.Spec.OffPeakWindowOptions = nil
	}
	if resp.DomainStatus.Processing != nil {
		ko.Status.Processing = resp.DomainStatus.Processing
	} else {
		ko.Status.Processing = nil
	}
	if resp.DomainStatus.ServiceSoftwareOptions != nil {
		f28 := &svcapitypes.ServiceSoftwareOptions{}
		if resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate != nil {
			f28.AutomatedUpdateDate = &metav1.Time{*resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate}
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Cancellable != nil {
			f28.Cancellable = resp.DomainStatus.ServiceSoftwareOptions.Cancellable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion != nil {
			f28.CurrentVersion = resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Description != nil {
			f28.Description = resp.DomainStatus.ServiceSoftwareOptions.Description
		}
		if resp.DomainStatus.ServiceSoftwareOptions.NewVersion != nil {
			f28.NewVersion = resp.DomainStatus.ServiceSoftwareOptions.NewVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment != nil {
			f28.OptionalDeployment = resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable != nil {
			f28.UpdateAvailable = resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus != nil {
			f28.UpdateStatus = resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus
		}
		ko.Status.ServiceSoftwareOptions = f28
	} else {
		ko.Status.ServiceSoftwareOptions = nil
	}
	if resp.DomainStatus.SnapshotOptions != nil {
		f29 := &svcapitypes.SnapshotOptions{}
		if resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f29.AutomatedSnapshotStartHour = resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour
		}
		ko.Status.SnapshotOptions = f29
	} else {
		ko.Status.SnapshotOptions = nil
	}
	if resp.DomainStatus.SoftwareUpdateOptions != nil {
		f30 := &svcapitypes.SoftwareUpdateOptions{}
		if resp.DomainStatus.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled != nil {
			f30.AutoSoftwareUpdateEnabled = resp.DomainStatus.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled
		}
		ko.Spec.SoftwareUpdateOptions = f30
	} else {
		ko.Spec.SoftwareUpdateOptions = nil
	}
	if resp.DomainStatus.UpgradeProcessing != nil {
		ko.Status.UpgradeProcessing = resp.DomainStatus.UpgradeProcessing
	} else {
		ko.Status.UpgradeProcessing = nil
	}
	if resp.DomainStatus.VPCOptions != nil {
		f32 := &svcapitypes.VPCOptions{}
		if resp.DomainStatus.VPCOptions.SecurityGroupIds != nil {
			f32f1 := []*string{}
			for _, f32f1iter := range resp.DomainStatus.VPCOptions.SecurityGroupIds {
				var f32f1elem string
				f32f1elem = *f32f1iter
				f32f1 = append(f32f1, &f32f1elem)
			}
			f32.SecurityGroupIDs = f32f1
		}
		if resp.DomainStatus.VPCOptions.SubnetIds != nil {
			f32f2 := []*string{}
			for _, f32f2iter := range resp.DomainStatus.VPCOptions.SubnetIds {
				var f32f2elem string
				f32f2elem = *f32f2iter
				f32f2 = append(f32f2, &f32f2elem)
			}
			f32.SubnetIDs = f32f2
		}
		ko.Spec.VPCOptions = f32
	} else {
		ko.Spec.VPCOptions = nil
	}

	rm.setStatusDefaults(ko)
	if domainProcessing(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	} else {
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionTrue, nil, nil)
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeDomainInput, error) {
	res := &svcsdk.DescribeDomainInput{}

	if r.ko.Spec.Name != nil {
		res.SetDomainName(*r.ko.Spec.Name)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDomainOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DomainStatus.AIMLOptions != nil {
		f0 := &svcapitypes.AIMLOptionsInput{}
		if resp.DomainStatus.AIMLOptions.NaturalLanguageQueryGenerationOptions != nil {
			f0f0 := &svcapitypes.NATuralLanguageQueryGenerationOptionsInput{}
			if resp.DomainStatus.AIMLOptions.NaturalLanguageQueryGenerationOptions.DesiredState != nil {
				f0f0.DesiredState = resp.DomainStatus.AIMLOptions.NaturalLanguageQueryGenerationOptions.DesiredState
			}
			f0.NATuralLanguageQueryGenerationOptions = f0f0
		}
		ko.Spec.AIMLOptions = f0
	} else {
		ko.Spec.AIMLOptions = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainStatus.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainStatus.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainStatus.AccessPolicies != nil {
		ko.Spec.AccessPolicies = resp.DomainStatus.AccessPolicies
	} else {
		ko.Spec.AccessPolicies = nil
	}
	if resp.DomainStatus.AdvancedOptions != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range resp.DomainStatus.AdvancedOptions {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		ko.Spec.AdvancedOptions = f3
	} else {
		ko.Spec.AdvancedOptions = nil
	}
	if resp.DomainStatus.AdvancedSecurityOptions != nil {
		f4 := &svcapitypes.AdvancedSecurityOptionsInput{}
		if resp.DomainStatus.AdvancedSecurityOptions.AnonymousAuthEnabled != nil {
			f4.AnonymousAuthEnabled = resp.DomainStatus.AdvancedSecurityOptions.AnonymousAuthEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.Enabled != nil {
			f4.Enabled = resp.DomainStatus.AdvancedSecurityOptions.Enabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f4.InternalUserDatabaseEnabled = resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions != nil {
			f4f4 := &svcapitypes.JWTOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.Enabled != nil {
				f4f4.Enabled = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.PublicKey != nil {
				f4f4.PublicKey = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.PublicKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.RolesKey != nil {
				f4f4.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.SubjectKey != nil {
				f4f4.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.JWTOptions.SubjectKey
			}
			f4.JWTOptions = f4f4
		}
		if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions != nil {
			f4f5 := &svcapitypes.SAMLOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f4f5.Enabled = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp != nil {
				f4f5f1 := &svcapitypes.SAMLIDp{}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId != nil {
					f4f5f1.EntityID = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId
				}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent != nil {
					f4f5f1.MetadataContent = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent
				}
				f4f5.IDp = f4f5f1
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f4f5.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f4f5.SessionTimeoutMinutes = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f4f5.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey
			}
			f4.SAMLOptions = f4f5
		}
		ko.Spec.AdvancedSecurityOptions = f4
	} else {
		ko.Spec.AdvancedSecurityOptions = nil
	}
	if resp.DomainStatus.AutoTuneOptions != nil {
		f5 := &svcapitypes.AutoTuneOptionsInput{}
		if resp.DomainStatus.AutoTuneOptions.UseOffPeakWindow != nil {
			f5.UseOffPeakWindow = resp.DomainStatus.AutoTuneOptions.UseOffPeakWindow
		}
		ko.Spec.AutoTuneOptions = f5
	} else {
		ko.Spec.AutoTuneOptions = nil
	}
	if resp.DomainStatus.ChangeProgressDetails != nil {
		f6 := &svcapitypes.ChangeProgressDetails{}
		if resp.DomainStatus.ChangeProgressDetails.ChangeId != nil {
			f6.ChangeID = resp.DomainStatus.ChangeProgressDetails.ChangeId
		}
		if resp.DomainStatus.ChangeProgressDetails.ConfigChangeStatus != nil {
			f6.ConfigChangeStatus = resp.DomainStatus.ChangeProgressDetails.ConfigChangeStatus
		}
		if resp.DomainStatus.ChangeProgressDetails.InitiatedBy != nil {
			f6.InitiatedBy = resp.DomainStatus.ChangeProgressDetails.InitiatedBy
		}
		if resp.DomainStatus.ChangeProgressDetails.LastUpdatedTime != nil {
			f6.LastUpdatedTime = &metav1.Time{*resp.DomainStatus.ChangeProgressDetails.LastUpdatedTime}
		}
		if resp.DomainStatus.ChangeProgressDetails.Message != nil {
			f6.Message = resp.DomainStatus.ChangeProgressDetails.Message
		}
		if resp.DomainStatus.ChangeProgressDetails.StartTime != nil {
			f6.StartTime = &metav1.Time{*resp.DomainStatus.ChangeProgressDetails.StartTime}
		}
		ko.Status.ChangeProgressDetails = f6
	} else {
		ko.Status.ChangeProgressDetails = nil
	}
	if resp.DomainStatus.ClusterConfig != nil {
		f7 := &svcapitypes.ClusterConfig{}
		if resp.DomainStatus.ClusterConfig.ColdStorageOptions != nil {
			f7f0 := &svcapitypes.ColdStorageOptions{}
			if resp.DomainStatus.ClusterConfig.ColdStorageOptions.Enabled != nil {
				f7f0.Enabled = resp.DomainStatus.ClusterConfig.ColdStorageOptions.Enabled
			}
			f7.ColdStorageOptions = f7f0
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterCount != nil {
			f7.DedicatedMasterCount = resp.DomainStatus.ClusterConfig.DedicatedMasterCount
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterEnabled != nil {
			f7.DedicatedMasterEnabled = resp.DomainStatus.ClusterConfig.DedicatedMasterEnabled
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterType != nil {
			f7.DedicatedMasterType = resp.DomainStatus.ClusterConfig.DedicatedMasterType
		}
		if resp.DomainStatus.ClusterConfig.InstanceCount != nil {
			f7.InstanceCount = resp.DomainStatus.ClusterConfig.InstanceCount
		}
		if resp.DomainStatus.ClusterConfig.InstanceType != nil {
			f7.InstanceType = resp.DomainStatus.ClusterConfig.InstanceType
		}
		if resp.DomainStatus.ClusterConfig.MultiAZWithStandbyEnabled != nil {
			f7.MultiAZWithStandbyEnabled = resp.DomainStatus.ClusterConfig.MultiAZWithStandbyEnabled
		}
		if resp.DomainStatus.ClusterConfig.WarmCount != nil {
			f7.WarmCount = resp.DomainStatus.ClusterConfig.WarmCount
		}
		if resp.DomainStatus.ClusterConfig.WarmEnabled != nil {
			f7.WarmEnabled = resp.DomainStatus.ClusterConfig.WarmEnabled
		}
		if resp.DomainStatus.ClusterConfig.WarmType != nil {
			f7.WarmType = resp.DomainStatus.ClusterConfig.WarmType
		}
		if resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig != nil {
			f7f10 := &svcapitypes.ZoneAwarenessConfig{}
			if resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f7f10.AvailabilityZoneCount = resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount
			}
			f7.ZoneAwarenessConfig = f7f10
		}
		if resp.DomainStatus.ClusterConfig.ZoneAwarenessEnabled != nil {
			f7.ZoneAwarenessEnabled = resp.DomainStatus.ClusterConfig.ZoneAwarenessEnabled
		}
		ko.Spec.ClusterConfig = f7
	} else {
		ko.Spec.ClusterConfig = nil
	}
	if resp.DomainStatus.CognitoOptions != nil {
		f8 := &svcapitypes.CognitoOptions{}
		if resp.DomainStatus.CognitoOptions.Enabled != nil {
			f8.Enabled = resp.DomainStatus.CognitoOptions.Enabled
		}
		if resp.DomainStatus.CognitoOptions.IdentityPoolId != nil {
			f8.IdentityPoolID = resp.DomainStatus.CognitoOptions.IdentityPoolId
		}
		if resp.DomainStatus.CognitoOptions.RoleArn != nil {
			f8.RoleARN = resp.DomainStatus.CognitoOptions.RoleArn
		}
		if resp.DomainStatus.CognitoOptions.UserPoolId != nil {
			f8.UserPoolID = resp.DomainStatus.CognitoOptions.UserPoolId
		}
		ko.Spec.CognitoOptions = f8
	} else {
		ko.Spec.CognitoOptions = nil
	}
	if resp.DomainStatus.Created != nil {
		ko.Status.Created = resp.DomainStatus.Created
	} else {
		ko.Status.Created = nil
	}
	if resp.DomainStatus.Deleted != nil {
		ko.Status.Deleted = resp.DomainStatus.Deleted
	} else {
		ko.Status.Deleted = nil
	}
	if resp.DomainStatus.DomainEndpointOptions != nil {
		f11 := &svcapitypes.DomainEndpointOptions{}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpoint != nil {
			f11.CustomEndpoint = resp.DomainStatus.DomainEndpointOptions.CustomEndpoint
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn != nil {
			f11.CustomEndpointCertificateARN = resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f11.CustomEndpointEnabled = resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled
		}
		if resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS != nil {
			f11.EnforceHTTPS = resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS
		}
		if resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f11.TLSSecurityPolicy = resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy
		}
		ko.Spec.DomainEndpointOptions = f11
	} else {
		ko.Spec.DomainEndpointOptions = nil
	}
	if resp.DomainStatus.DomainEndpointV2HostedZoneId != nil {
		ko.Status.DomainEndpointV2HostedZoneID = resp.DomainStatus.DomainEndpointV2HostedZoneId
	} else {
		ko.Status.DomainEndpointV2HostedZoneID = nil
	}
	if resp.DomainStatus.DomainId != nil {
		ko.Status.DomainID = resp.DomainStatus.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainStatus.DomainName != nil {
		ko.Spec.Name = resp.DomainStatus.DomainName
	} else {
		ko.Spec.Name = nil
	}
	if resp.DomainStatus.DomainProcessingStatus != nil {
		ko.Status.DomainProcessingStatus = resp.DomainStatus.DomainProcessingStatus
	} else {
		ko.Status.DomainProcessingStatus = nil
	}
	if resp.DomainStatus.EBSOptions != nil {
		f16 := &svcapitypes.EBSOptions{}
		if resp.DomainStatus.EBSOptions.EBSEnabled != nil {
			f16.EBSEnabled = resp.DomainStatus.EBSOptions.EBSEnabled
		}
		if resp.DomainStatus.EBSOptions.Iops != nil {
			f16.IOPS = resp.DomainStatus.EBSOptions.Iops
		}
		if resp.DomainStatus.EBSOptions.Throughput != nil {
			f16.Throughput = resp.DomainStatus.EBSOptions.Throughput
		}
		if resp.DomainStatus.EBSOptions.VolumeSize != nil {
			f16.VolumeSize = resp.DomainStatus.EBSOptions.VolumeSize
		}
		if resp.DomainStatus.EBSOptions.VolumeType != nil {
			f16.VolumeType = resp.DomainStatus.EBSOptions.VolumeType
		}
		ko.Spec.EBSOptions = f16
	} else {
		ko.Spec.EBSOptions = nil
	}
	if resp.DomainStatus.EncryptionAtRestOptions != nil {
		f17 := &svcapitypes.EncryptionAtRestOptions{}
		if resp.DomainStatus.EncryptionAtRestOptions.Enabled != nil {
			f17.Enabled = resp.DomainStatus.EncryptionAtRestOptions.Enabled
		}
		if resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId != nil {
			f17.KMSKeyID = resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId
		}
		ko.Spec.EncryptionAtRestOptions = f17
	} else {
		ko.Spec.EncryptionAtRestOptions = nil
	}
	if resp.DomainStatus.Endpoint != nil {
		ko.Status.Endpoint = resp.DomainStatus.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DomainStatus.EndpointV2 != nil {
		ko.Status.EndpointV2 = resp.DomainStatus.EndpointV2
	} else {
		ko.Status.EndpointV2 = nil
	}
	if resp.DomainStatus.Endpoints != nil {
		f20 := map[string]*string{}
		for f20key, f20valiter := range resp.DomainStatus.Endpoints {
			var f20val string
			f20val = *f20valiter
			f20[f20key] = &f20val
		}
		ko.Status.Endpoints = f20
	} else {
		ko.Status.Endpoints = nil
	}
	if resp.DomainStatus.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.DomainStatus.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.DomainStatus.IPAddressType != nil {
		ko.Spec.IPAddressType = resp.DomainStatus.IPAddressType
	} else {
		ko.Spec.IPAddressType = nil
	}
	if resp.DomainStatus.LogPublishingOptions != nil {
		f23 := map[string]*svcapitypes.LogPublishingOption{}
		for f23key, f23valiter := range resp.DomainStatus.LogPublishingOptions {
			f23val := &svcapitypes.LogPublishingOption{}
			if f23valiter.CloudWatchLogsLogGroupArn != nil {
				f23val.CloudWatchLogsLogGroupARN = f23valiter.CloudWatchLogsLogGroupArn
			}
			if f23valiter.Enabled != nil {
				f23val.Enabled = f23valiter.Enabled
			}
			f23[f23key] = f23val
		}
		ko.Spec.LogPublishingOptions = f23
	} else {
		ko.Spec.LogPublishingOptions = nil
	}
	if resp.DomainStatus.ModifyingProperties != nil {
		f24 := []*svcapitypes.ModifyingProperties{}
		for _, f24iter := range resp.DomainStatus.ModifyingProperties {
			f24elem := &svcapitypes.ModifyingProperties{}
			if f24iter.ActiveValue != nil {
				f24elem.ActiveValue = f24iter.ActiveValue
			}
			if f24iter.Name != nil {
				f24elem.Name = f24iter.Name
			}
			if f24iter.PendingValue != nil {
				f24elem.PendingValue = f24iter.PendingValue
			}
			if f24iter.ValueType != nil {
				f24elem.ValueType = f24iter.ValueType
			}
			f24 = append(f24, f24elem)
		}
		ko.Status.ModifyingProperties = f24
	} else {
		ko.Status.ModifyingProperties = nil
	}
	if resp.DomainStatus.NodeToNodeEncryptionOptions != nil {
		f25 := &svcapitypes.NodeToNodeEncryptionOptions{}
		if resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled != nil {
			f25.Enabled = resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled
		}
		ko.Spec.NodeToNodeEncryptionOptions = f25
	} else {
		ko.Spec.NodeToNodeEncryptionOptions = nil
	}
	if resp.DomainStatus.OffPeakWindowOptions != nil {
		f26 := &svcapitypes.OffPeakWindowOptions{}
		if resp.DomainStatus.OffPeakWindowOptions.Enabled != nil {
			f26.Enabled = resp.DomainStatus.OffPeakWindowOptions.Enabled
		}
		if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow != nil {
			f26f1 := &svcapitypes.OffPeakWindow{}
			if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime != nil {
				f26f1f0 := &svcapitypes.WindowStartTime{}
				if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours != nil {
					f26f1f0.Hours = resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours
				}
				if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes != nil {
					f26f1f0.Minutes = resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes
				}
				f26f1.WindowStartTime = f26f1f0
			}
			f26.OffPeakWindow = f26f1
		}
		ko.Spec.OffPeakWindowOptions = f26
	} else {
		ko.Spec.OffPeakWindowOptions = nil
	}
	if resp.DomainStatus.Processing != nil {
		ko.Status.Processing = resp.DomainStatus.Processing
	} else {
		ko.Status.Processing = nil
	}
	if resp.DomainStatus.ServiceSoftwareOptions != nil {
		f28 := &svcapitypes.ServiceSoftwareOptions{}
		if resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate != nil {
			f28.AutomatedUpdateDate = &metav1.Time{*resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate}
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Cancellable != nil {
			f28.Cancellable = resp.DomainStatus.ServiceSoftwareOptions.Cancellable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion != nil {
			f28.CurrentVersion = resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Description != nil {
			f28.Description = resp.DomainStatus.ServiceSoftwareOptions.Description
		}
		if resp.DomainStatus.ServiceSoftwareOptions.NewVersion != nil {
			f28.NewVersion = resp.DomainStatus.ServiceSoftwareOptions.NewVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment != nil {
			f28.OptionalDeployment = resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable != nil {
			f28.UpdateAvailable = resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus != nil {
			f28.UpdateStatus = resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus
		}
		ko.Status.ServiceSoftwareOptions = f28
	} else {
		ko.Status.ServiceSoftwareOptions = nil
	}
	if resp.DomainStatus.SnapshotOptions != nil {
		f29 := &svcapitypes.SnapshotOptions{}
		if resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f29.AutomatedSnapshotStartHour = resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour
		}
		ko.Status.SnapshotOptions = f29
	} else {
		ko.Status.SnapshotOptions = nil
	}
	if resp.DomainStatus.SoftwareUpdateOptions != nil {
		f30 := &svcapitypes.SoftwareUpdateOptions{}
		if resp.DomainStatus.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled != nil {
			f30.AutoSoftwareUpdateEnabled = resp.DomainStatus.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled
		}
		ko.Spec.SoftwareUpdateOptions = f30
	} else {
		ko.Spec.SoftwareUpdateOptions = nil
	}
	if resp.DomainStatus.UpgradeProcessing != nil {
		ko.Status.UpgradeProcessing = resp.DomainStatus.UpgradeProcessing
	} else {
		ko.Status.UpgradeProcessing = nil
	}
	if resp.DomainStatus.VPCOptions != nil {
		f32 := &svcapitypes.VPCOptions{}
		if resp.DomainStatus.VPCOptions.SecurityGroupIds != nil {
			f32f1 := []*string{}
			for _, f32f1iter := range resp.DomainStatus.VPCOptions.SecurityGroupIds {
				var f32f1elem string
				f32f1elem = *f32f1iter
				f32f1 = append(f32f1, &f32f1elem)
			}
			f32.SecurityGroupIDs = f32f1
		}
		if resp.DomainStatus.VPCOptions.SubnetIds != nil {
			f32f2 := []*string{}
			for _, f32f2iter := range resp.DomainStatus.VPCOptions.SubnetIds {
				var f32f2elem string
				f32f2elem = *f32f2iter
				f32f2 = append(f32f2, &f32f2elem)
			}
			f32.SubnetIDs = f32f2
		}
		ko.Spec.VPCOptions = f32
	} else {
		ko.Spec.VPCOptions = nil
	}

	rm.setStatusDefaults(ko)
	if domainProcessing(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
		return &resource{ko}, nil
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDomainInput, error) {
	res := &svcsdk.CreateDomainInput{}

	if r.ko.Spec.AIMLOptions != nil {
		f0 := &svcsdk.AIMLOptionsInput_{}
		if r.ko.Spec.AIMLOptions.NATuralLanguageQueryGenerationOptions != nil {
			f0f0 := &svcsdk.NaturalLanguageQueryGenerationOptionsInput_{}
			if r.ko.Spec.AIMLOptions.NATuralLanguageQueryGenerationOptions.DesiredState != nil {
				f0f0.SetDesiredState(*r.ko.Spec.AIMLOptions.NATuralLanguageQueryGenerationOptions.DesiredState)
			}
			f0.SetNaturalLanguageQueryGenerationOptions(f0f0)
		}
		res.SetAIMLOptions(f0)
	}
	if r.ko.Spec.AccessPolicies != nil {
		res.SetAccessPolicies(*r.ko.Spec.AccessPolicies)
	}
	if r.ko.Spec.AdvancedOptions != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range r.ko.Spec.AdvancedOptions {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetAdvancedOptions(f2)
	}
	if r.ko.Spec.AdvancedSecurityOptions != nil {
		f3 := &svcsdk.AdvancedSecurityOptionsInput_{}
		if r.ko.Spec.AdvancedSecurityOptions.AnonymousAuthEnabled != nil {
			f3.SetAnonymousAuthEnabled(*r.ko.Spec.AdvancedSecurityOptions.AnonymousAuthEnabled)
		}
		if r.ko.Spec.AdvancedSecurityOptions.Enabled != nil {
			f3.SetEnabled(*r.ko.Spec.AdvancedSecurityOptions.Enabled)
		}
		if r.ko.Spec.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f3.SetInternalUserDatabaseEnabled(*r.ko.Spec.AdvancedSecurityOptions.InternalUserDatabaseEnabled)
		}
		if r.ko.Spec.AdvancedSecurityOptions.JWTOptions != nil {
			f3f3 := &svcsdk.JWTOptionsInput_{}
			if r.ko.Spec.AdvancedSecurityOptions.JWTOptions.Enabled != nil {
				f3f3.SetEnabled(*r.ko.Spec.AdvancedSecurityOptions.JWTOptions.Enabled)
			}
			if r.ko.Spec.AdvancedSecurityOptions.JWTOptions.PublicKey != nil {
				f3f3.SetPublicKey(*r.ko.Spec.AdvancedSecurityOptions.JWTOptions.PublicKey)
			}
			if r.ko.Spec.AdvancedSecurityOptions.JWTOptions.RolesKey != nil {
				f3f3.SetRolesKey(*r.ko.Spec.AdvancedSecurityOptions.JWTOptions.RolesKey)
			}
			if r.ko.Spec.AdvancedSecurityOptions.JWTOptions.SubjectKey != nil {
				f3f3.SetSubjectKey(*r.ko.Spec.AdvancedSecurityOptions.JWTOptions.SubjectKey)
			}
			f3.SetJWTOptions(f3f3)
		}
		if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions != nil {
			f3f4 := &svcsdk.MasterUserOptions{}
			if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN != nil {
				f3f4.SetMasterUserARN(*r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN)
			}
			if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserName != nil {
				f3f4.SetMasterUserName(*r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserName)
			}
			if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword != nil {
				tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword)
				if err != nil {
					return nil, ackrequeue.Needed(err)
				}
				if tmpSecret != "" {
					f3f4.SetMasterUserPassword(tmpSecret)
				}
			}
			f3.SetMasterUserOptions(f3f4)
		}
		if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions != nil {
			f3f5 := &svcsdk.SAMLOptionsInput_{}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f3f5.SetEnabled(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.Enabled)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp != nil {
				f3f5f1 := &svcsdk.SAMLIdp{}
				if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID != nil {
					f3f5f1.SetEntityId(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID)
				}
				if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent != nil {
					f3f5f1.SetMetadataContent(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent)
				}
				f3f5.SetIdp(f3f5f1)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole != nil {
				f3f5.SetMasterBackendRole(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterUserName != nil {
				f3f5.SetMasterUserName(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterUserName)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f3f5.SetRolesKey(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.RolesKey)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f3f5.SetSessionTimeoutMinutes(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f3f5.SetSubjectKey(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SubjectKey)
			}
			f3.SetSAMLOptions(f3f5)
		}
		res.SetAdvancedSecurityOptions(f3)
	}
	if r.ko.Spec.AutoTuneOptions != nil {
		f4 := &svcsdk.AutoTuneOptionsInput_{}
		if r.ko.Spec.AutoTuneOptions.DesiredState != nil {
			f4.SetDesiredState(*r.ko.Spec.AutoTuneOptions.DesiredState)
		}
		if r.ko.Spec.AutoTuneOptions.MaintenanceSchedules != nil {
			f4f1 := []*svcsdk.AutoTuneMaintenanceSchedule{}
			for _, f4f1iter := range r.ko.Spec.AutoTuneOptions.MaintenanceSchedules {
				f4f1elem := &svcsdk.AutoTuneMaintenanceSchedule{}
				if f4f1iter.CronExpressionForRecurrence != nil {
					f4f1elem.SetCronExpressionForRecurrence(*f4f1iter.CronExpressionForRecurrence)
				}
				if f4f1iter.Duration != nil {
					f4f1elemf1 := &svcsdk.Duration{}
					if f4f1iter.Duration.Unit != nil {
						f4f1elemf1.SetUnit(*f4f1iter.Duration.Unit)
					}
					if f4f1iter.Duration.Value != nil {
						f4f1elemf1.SetValue(*f4f1iter.Duration.Value)
					}
					f4f1elem.SetDuration(f4f1elemf1)
				}
				if f4f1iter.StartAt != nil {
					f4f1elem.SetStartAt(f4f1iter.StartAt.Time)
				}
				f4f1 = append(f4f1, f4f1elem)
			}
			f4.SetMaintenanceSchedules(f4f1)
		}
		if r.ko.Spec.AutoTuneOptions.UseOffPeakWindow != nil {
			f4.SetUseOffPeakWindow(*r.ko.Spec.AutoTuneOptions.UseOffPeakWindow)
		}
		res.SetAutoTuneOptions(f4)
	}
	if r.ko.Spec.ClusterConfig != nil {
		f5 := &svcsdk.ClusterConfig{}
		if r.ko.Spec.ClusterConfig.ColdStorageOptions != nil {
			f5f0 := &svcsdk.ColdStorageOptions{}
			if r.ko.Spec.ClusterConfig.ColdStorageOptions.Enabled != nil {
				f5f0.SetEnabled(*r.ko.Spec.ClusterConfig.ColdStorageOptions.Enabled)
			}
			f5.SetColdStorageOptions(f5f0)
		}
		if r.ko.Spec.ClusterConfig.DedicatedMasterCount != nil {
			f5.SetDedicatedMasterCount(*r.ko.Spec.ClusterConfig.DedicatedMasterCount)
		}
		if r.ko.Spec.ClusterConfig.DedicatedMasterEnabled != nil {
			f5.SetDedicatedMasterEnabled(*r.ko.Spec.ClusterConfig.DedicatedMasterEnabled)
		}
		if r.ko.Spec.ClusterConfig.DedicatedMasterType != nil {
			f5.SetDedicatedMasterType(*r.ko.Spec.ClusterConfig.DedicatedMasterType)
		}
		if r.ko.Spec.ClusterConfig.InstanceCount != nil {
			f5.SetInstanceCount(*r.ko.Spec.ClusterConfig.InstanceCount)
		}
		if r.ko.Spec.ClusterConfig.InstanceType != nil {
			f5.SetInstanceType(*r.ko.Spec.ClusterConfig.InstanceType)
		}
		if r.ko.Spec.ClusterConfig.MultiAZWithStandbyEnabled != nil {
			f5.SetMultiAZWithStandbyEnabled(*r.ko.Spec.ClusterConfig.MultiAZWithStandbyEnabled)
		}
		if r.ko.Spec.ClusterConfig.WarmCount != nil {
			f5.SetWarmCount(*r.ko.Spec.ClusterConfig.WarmCount)
		}
		if r.ko.Spec.ClusterConfig.WarmEnabled != nil {
			f5.SetWarmEnabled(*r.ko.Spec.ClusterConfig.WarmEnabled)
		}
		if r.ko.Spec.ClusterConfig.WarmType != nil {
			f5.SetWarmType(*r.ko.Spec.ClusterConfig.WarmType)
		}
		if r.ko.Spec.ClusterConfig.ZoneAwarenessConfig != nil {
			f5f10 := &svcsdk.ZoneAwarenessConfig{}
			if r.ko.Spec.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f5f10.SetAvailabilityZoneCount(*r.ko.Spec.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount)
			}
			f5.SetZoneAwarenessConfig(f5f10)
		}
		if r.ko.Spec.ClusterConfig.ZoneAwarenessEnabled != nil {
			f5.SetZoneAwarenessEnabled(*r.ko.Spec.ClusterConfig.ZoneAwarenessEnabled)
		}
		res.SetClusterConfig(f5)
	}
	if r.ko.Spec.CognitoOptions != nil {
		f6 := &svcsdk.CognitoOptions{}
		if r.ko.Spec.CognitoOptions.Enabled != nil {
			f6.SetEnabled(*r.ko.Spec.CognitoOptions.Enabled)
		}
		if r.ko.Spec.CognitoOptions.IdentityPoolID != nil {
			f6.SetIdentityPoolId(*r.ko.Spec.CognitoOptions.IdentityPoolID)
		}
		if r.ko.Spec.CognitoOptions.RoleARN != nil {
			f6.SetRoleArn(*r.ko.Spec.CognitoOptions.RoleARN)
		}
		if r.ko.Spec.CognitoOptions.UserPoolID != nil {
			f6.SetUserPoolId(*r.ko.Spec.CognitoOptions.UserPoolID)
		}
		res.SetCognitoOptions(f6)
	}
	if r.ko.Spec.DomainEndpointOptions != nil {
		f7 := &svcsdk.DomainEndpointOptions{}
		if r.ko.Spec.DomainEndpointOptions.CustomEndpoint != nil {
			f7.SetCustomEndpoint(*r.ko.Spec.DomainEndpointOptions.CustomEndpoint)
		}
		if r.ko.Spec.DomainEndpointOptions.CustomEndpointCertificateARN != nil {
			f7.SetCustomEndpointCertificateArn(*r.ko.Spec.DomainEndpointOptions.CustomEndpointCertificateARN)
		}
		if r.ko.Spec.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f7.SetCustomEndpointEnabled(*r.ko.Spec.DomainEndpointOptions.CustomEndpointEnabled)
		}
		if r.ko.Spec.DomainEndpointOptions.EnforceHTTPS != nil {
			f7.SetEnforceHTTPS(*r.ko.Spec.DomainEndpointOptions.EnforceHTTPS)
		}
		if r.ko.Spec.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f7.SetTLSSecurityPolicy(*r.ko.Spec.DomainEndpointOptions.TLSSecurityPolicy)
		}
		res.SetDomainEndpointOptions(f7)
	}
	if r.ko.Spec.Name != nil {
		res.SetDomainName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.EBSOptions != nil {
		f9 := &svcsdk.EBSOptions{}
		if r.ko.Spec.EBSOptions.EBSEnabled != nil {
			f9.SetEBSEnabled(*r.ko.Spec.EBSOptions.EBSEnabled)
		}
		if r.ko.Spec.EBSOptions.IOPS != nil {
			f9.SetIops(*r.ko.Spec.EBSOptions.IOPS)
		}
		if r.ko.Spec.EBSOptions.Throughput != nil {
			f9.SetThroughput(*r.ko.Spec.EBSOptions.Throughput)
		}
		if r.ko.Spec.EBSOptions.VolumeSize != nil {
			f9.SetVolumeSize(*r.ko.Spec.EBSOptions.VolumeSize)
		}
		if r.ko.Spec.EBSOptions.VolumeType != nil {
			f9.SetVolumeType(*r.ko.Spec.EBSOptions.VolumeType)
		}
		res.SetEBSOptions(f9)
	}
	if r.ko.Spec.EncryptionAtRestOptions != nil {
		f10 := &svcsdk.EncryptionAtRestOptions{}
		if r.ko.Spec.EncryptionAtRestOptions.Enabled != nil {
			f10.SetEnabled(*r.ko.Spec.EncryptionAtRestOptions.Enabled)
		}
		if r.ko.Spec.EncryptionAtRestOptions.KMSKeyID != nil {
			f10.SetKmsKeyId(*r.ko.Spec.EncryptionAtRestOptions.KMSKeyID)
		}
		res.SetEncryptionAtRestOptions(f10)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.IPAddressType != nil {
		res.SetIPAddressType(*r.ko.Spec.IPAddressType)
	}
	if r.ko.Spec.LogPublishingOptions != nil {
		f13 := map[string]*svcsdk.LogPublishingOption{}
		for f13key, f13valiter := range r.ko.Spec.LogPublishingOptions {
			f13val := &svcsdk.LogPublishingOption{}
			if f13valiter.CloudWatchLogsLogGroupARN != nil {
				f13val.SetCloudWatchLogsLogGroupArn(*f13valiter.CloudWatchLogsLogGroupARN)
			}
			if f13valiter.Enabled != nil {
				f13val.SetEnabled(*f13valiter.Enabled)
			}
			f13[f13key] = f13val
		}
		res.SetLogPublishingOptions(f13)
	}
	if r.ko.Spec.NodeToNodeEncryptionOptions != nil {
		f14 := &svcsdk.NodeToNodeEncryptionOptions{}
		if r.ko.Spec.NodeToNodeEncryptionOptions.Enabled != nil {
			f14.SetEnabled(*r.ko.Spec.NodeToNodeEncryptionOptions.Enabled)
		}
		res.SetNodeToNodeEncryptionOptions(f14)
	}
	if r.ko.Spec.OffPeakWindowOptions != nil {
		f15 := &svcsdk.OffPeakWindowOptions{}
		if r.ko.Spec.OffPeakWindowOptions.Enabled != nil {
			f15.SetEnabled(*r.ko.Spec.OffPeakWindowOptions.Enabled)
		}
		if r.ko.Spec.OffPeakWindowOptions.OffPeakWindow != nil {
			f15f1 := &svcsdk.OffPeakWindow{}
			if r.ko.Spec.OffPeakWindowOptions.OffPeakWindow.WindowStartTime != nil {
				f15f1f0 := &svcsdk.WindowStartTime{}
				if r.ko.Spec.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours != nil {
					f15f1f0.SetHours(*r.ko.Spec.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours)
				}
				if r.ko.Spec.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes != nil {
					f15f1f0.SetMinutes(*r.ko.Spec.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes)
				}
				f15f1.SetWindowStartTime(f15f1f0)
			}
			f15.SetOffPeakWindow(f15f1)
		}
		res.SetOffPeakWindowOptions(f15)
	}
	if r.ko.Spec.SoftwareUpdateOptions != nil {
		f16 := &svcsdk.SoftwareUpdateOptions{}
		if r.ko.Spec.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled != nil {
			f16.SetAutoSoftwareUpdateEnabled(*r.ko.Spec.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled)
		}
		res.SetSoftwareUpdateOptions(f16)
	}
	if r.ko.Spec.Tags != nil {
		f17 := []*svcsdk.Tag{}
		for _, f17iter := range r.ko.Spec.Tags {
			f17elem := &svcsdk.Tag{}
			if f17iter.Key != nil {
				f17elem.SetKey(*f17iter.Key)
			}
			if f17iter.Value != nil {
				f17elem.SetValue(*f17iter.Value)
			}
			f17 = append(f17, f17elem)
		}
		res.SetTagList(f17)
	}
	if r.ko.Spec.VPCOptions != nil {
		f18 := &svcsdk.VPCOptions{}
		if r.ko.Spec.VPCOptions.SecurityGroupIDs != nil {
			f18f0 := []*string{}
			for _, f18f0iter := range r.ko.Spec.VPCOptions.SecurityGroupIDs {
				var f18f0elem string
				f18f0elem = *f18f0iter
				f18f0 = append(f18f0, &f18f0elem)
			}
			f18.SetSecurityGroupIds(f18f0)
		}
		if r.ko.Spec.VPCOptions.SubnetIDs != nil {
			f18f1 := []*string{}
			for _, f18f1iter := range r.ko.Spec.VPCOptions.SubnetIDs {
				var f18f1elem string
				f18f1elem = *f18f1iter
				f18f1 = append(f18f1, &f18f1elem)
			}
			f18.SetSubnetIds(f18f1)
		}
		res.SetVPCOptions(f18)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateDomain(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if domainProcessing(r) {
		return r, requeueWaitWhileProcessing
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDomainOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDomain", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDomainInput, error) {
	res := &svcsdk.DeleteDomainInput{}

	if r.ko.Spec.Name != nil {
		res.SetDomainName(*r.ko.Spec.Name)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Domain,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ValidationException":
		return true
	default:
		return false
	}
}
